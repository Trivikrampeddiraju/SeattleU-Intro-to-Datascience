from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import mean_squared_error
import numpy as np
import pandas as pd

# load the data
data = pd.read_csv('housing_dataset.csv')

# split the data into features and target variable
X = data.drop(['target'], axis=1)
y = data['target']

# split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# tune the hyperparameters of the random forest regressor
param_grid = {'n_estimators': [50, 100, 150], 'max_features': ['auto', 'sqrt'], 'max_depth': [10, 20, None], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 3, 5]}
rf = RandomForestRegressor(random_state=42)
grid_search = GridSearchCV(estimator=rf, param_grid=param_grid, cv=5, n_jobs=-1)
grid_search.fit(X_train, y_train)

# get the best parameters and the best score
best_params = grid_search.best_params_
best_score = grid_search.best_score_

# create a random forest regressor with the best hyperparameters
rf_best = RandomForestRegressor(random_state=42, **best_params)

# fit the model on the training data
rf_best.fit(X_train, y_train)

# predict the target values for the test data
y_pred = rf_best.predict(X_test)

# calculate the root mean squared error of the model
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

print("Best parameters: ", best_params)
print("Best score: ", best_score)
print("Root mean squared error: ", rmse)
